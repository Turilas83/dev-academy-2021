{"version":3,"sources":["components/Search.jsx","components/ListNames.jsx","components/Header.jsx","components/Count.jsx","components/Footer.jsx","components/App.jsx","index.js"],"names":["Search","useState","name","amount","employee","setEmployee","error","setError","setName","fetchUrl","a","fetch","response","json","type","id","placeholder","value","onChange","e","target","className","onClick","length","ListNames","props","heading","names","setEmployees","sort","console","log","useEffect","cellSpacing","map","Header","Count","count","setCount","year","Date","Footer","getFullYear","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0d5c26b7.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nfunction Search () {\n    const [employee, setEmployee] = useState( {\n        name: '',\n        amount: ''\n    } );\n    const[error, setError] = useState('');\n    const[name, setName] = useState('');\n\n    // Fetch JSON with given name as parameter\n    const fetchUrl = async () => {\n        try {\n            const response = await fetch('http://localhost:5000/names/search/' + name);\n            const json = await response.json();\n            setEmployee(\n                {\n                    name: json.name,\n                    amount: json.amount\n                }\n            );\n            setError('');\n        } catch (error) {\n            setError('Name not found');\n        }\n    }\n    // Check name given to form is not empty and launch fetchUrl()\n    const search = (e) => {\n        if (name.length > 0) {\n            fetchUrl();\n        } else {\n            setError('Give Name');\n        }\n    }\n\n    return (\n        <div>\n            <form>\n                <input type='text' name='name' id='name' placeholder=\"Name to search..\" value={ name } \n                       onChange={ (e) => setName(e.target.value) } />&nbsp;\n                <input type='button' className=\"search button\" name='search' value='Search' onClick={ (e) =>  search(e)  } />\n            </form>\n            {\n                employee.name.length > 0 && error.length === 0 ?\n                <div>\n                    <h3>{ employee.amount } employees with name { employee.name } found!</h3>\n                </div>\n                : <p>{ error }</p>\n            }          \n        </div>\n    );\n}\nexport default Search;","import React, { useState, useEffect } from 'react';\n\nfunction ListNames(props) {\n    const [names, setEmployees] = useState({});\n    const[error, setError] = useState('Fetching...');\n\n    // Fetch list of names, sort names by given parameter\n    const fetchUrl = async () => {\n        try {\n            const response = await fetch(\"http://localhost:5000/names/\" + props.sort);\n            console.log(response);\n            const json = await response.json();\n            setEmployees(json.names);\n            setError('');\n        } catch (error) {\n            setError(\"Fetching data failed\");\n        }\n    }\n    // Change value of heading depending on given parameter\n    let heading;\n\n    if (props.sort === \"alphabetical-order\") {\n      heading = \"Names in Alphabetical Order\";\n    } else {\n      heading = \"Names in Top Order\";\n    }\n    // Fetch names JSON after render and return table with name and amount values\n    useEffect( () => { fetchUrl() }, [] );\n    if (error.length > 0) { return (<div>{ error }</div>) };\n    return ( \n      <div>\n        <h2>{heading}</h2>\n        <table cellSpacing=\"20\">\n          <thead>\n            <tr>\n              <th className=\"thname\">Name</th>\n              <th className=\"thname\">Amount</th>\n            </tr>\n          </thead>\n          <tbody>\n            {names.map(name =>\n              <tr key={name.name}>\n                <td>{name.name}</td> \n                <td>{name.amount}</td>\n              </tr>\n            )} \n          </tbody>\n        </table>\n      </div> \n    );\n}\n\nexport default ListNames;","import React from \"react\";\n\nfunction Header() {\n  return (\n    <div className=\"header\">\n      <h1>Solita - dev-academy-2021 exercise - Name Application</h1>\n    </div>\n  );\n}\n\nexport default Header;","import React, { useState, useEffect } from 'react';\n\nfunction Count() {\n  const [count, setCount] = useState({});\n  const [error, setError] = useState('Fetching...');\n\n  // Fetch count of names\n  const fetchUrl = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/names/count\");\n      console.log(response);\n      const json = await response.json();\n      setCount(json.count);\n      setError('');\n    } catch (error) {\n        setError(\"Fetching data failed\");\n    }\n  }\n  // Check that there is no errors and return count of names\n  useEffect( () => { fetchUrl() }, [] );\n  if (error.length > 0) { return (<div>{ error }</div>) };\n  return (\n    <div>\n      <h3>Total Count of Names: { count }</h3>\n    </div>\n  );\n}\n\nexport default Count;\n","import React from \"react\";\n\nconst year = new Date();\n\nfunction Footer() {\n  return(\n    <div className=\"footer\">\n      <p>Made by Mikko</p>\n      <p>{year.getFullYear()}</p>\n    </div>\n  )\n}\n\nexport default Footer;","import React from \"react\";\nimport Search from \"./Search\";\nimport ListNames from \"./ListNames\";\nimport Header from \"./Header\";\nimport Count from \"./Count\";\nimport Footer from \"./Footer\";\n\nconst alpha = \"alphabetical-order\";\nconst top = \"most-popular\";\n\nfunction App() {\n  return(\n    <div>\n      <Header />\n      <div className=\"middle\">\n        <Search />\n        <Count />\n      </div>\n      <div className=\"tables\">\n        <ListNames sort={alpha} />\n        <ListNames sort={top} />\n      </div>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App.jsx';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}